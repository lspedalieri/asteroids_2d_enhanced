[gd_scene load_steps=24 format=2]

[ext_resource path="res://scripts/main.gd" type="Script" id=1]
[ext_resource path="res://scenes/player.tscn" type="PackedScene" id=2]
[ext_resource path="res://Shaders/OutrunMidnightSun.gdshader" type="Shader" id=3]
[ext_resource path="res://audio/Red_Glowing_Dust.mp3" type="AudioStream" id=4]
[ext_resource path="res://scenes/HUD.tscn" type="PackedScene" id=6]
[ext_resource path="res://scripts/resize_background.gd" type="Script" id=7]
[ext_resource path="res://Shaders/StarNest.gdshader" type="Shader" id=8]
[ext_resource path="res://Shaders/electro_shader.gdshader" type="Shader" id=9]
[ext_resource path="res://Shaders/simple_stars.gdshader" type="Shader" id=10]
[ext_resource path="res://Shaders/fireworks.gdshader" type="Shader" id=11]
[ext_resource path="res://Shaders/StarNestSimple.gdshader" type="Shader" id=12]

[sub_resource type="VisualShader" id=20]
code = "shader_type spatial;
render_mode specular_schlick_ggx, async_visible;




void vertex() {
// Output:0

}

void fragment() {
// Output:0

}

void light() {
// Output:0

}
"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 20 )

[sub_resource type="ShaderMaterial" id=10]
shader = ExtResource( 3 )
shader_param/grid_speed = 1.0
shader_param/quota = 4.0

[sub_resource type="Shader" id=19]
code = "shader_type canvas_item;

float grid(vec2 uv, float velocity, float iTime)
{
    vec2 size = vec2(uv.y, uv.y * uv.y * 0.2) * 0.01;
    uv += vec2(0.0, iTime * 4.0 * (velocity + 0.05));
    uv = abs(fract(uv) - 0.5);
 	vec2 lines = smoothstep(size, vec2(0.0), uv);
 	lines += smoothstep(size * 5.0, vec2(0.0), uv) * 0.1 * velocity;
    return clamp(lines.x + lines.y, 0.0, 3.0);
}


void fragment()
{
    vec2 uv = (2.0 * FRAGCOORD.xy.xy - (1.0 / SCREEN_PIXEL_SIZE).xy)/(1.0 / SCREEN_PIXEL_SIZE).y;
    float velocity = 0.90;
   
    {
        // Grid
        vec3 col = vec3(0.6, 0.1, 0.6);
        if (uv.y < 1.0)
        {
            uv.y = 2.0 / (abs(uv.y + 0.0) * 01.0);
            uv.x *= uv.y - 01.01;
            float gridVal = grid(uv, velocity, TIME);
            col = mix(col, vec3(0.6, 0.2, 0.10), gridVal);
        }

        col = mix(vec3(col.r, col.r, col.r) * 0.53, col,  sin(TIME*0.710)*01.10);

        COLOR = vec4(col,7.0);
    }
      
}"

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 19 )

[sub_resource type="ShaderMaterial" id=18]
shader = ExtResource( 12 )
shader_param/iterations = 20
shader_param/formuparam = 1.0
shader_param/volsteps = 20
shader_param/stepsize = 0.1
shader_param/zoom = 0.8
shader_param/tile = 0.5
shader_param/xspeed = 0.0
shader_param/yspeed = 0.0
shader_param/brightness = 0.002
shader_param/darkmatter = 0.1
shader_param/distfading = 0.65
shader_param/saturation = 0.75

[sub_resource type="ShaderMaterial" id=8]
shader = ExtResource( 8 )
shader_param/iterations = 20
shader_param/formuparam = 1.0
shader_param/volsteps = 20
shader_param/stepsize = 0.1
shader_param/zoom = 0.8
shader_param/tile = 0.5
shader_param/speed = 0.001
shader_param/brightness = 0.002
shader_param/darkmatter = 0.1
shader_param/distfading = 0.65
shader_param/saturation = 0.75
shader_param/iResolution = Vector2( 192, 192 )
shader_param/iMouse = Vector2( 0, 0 )

[sub_resource type="ShaderMaterial" id=12]
shader = ExtResource( 9 )
shader_param/background_color = Color( 0, 0, 0, 1 )
shader_param/line_color = Color( 0, 1, 1, 1 )
shader_param/line_freq = 9.56
shader_param/height = 0.6
shader_param/speed = 0.8
shader_param/scale = Vector2( 2, 16 )

[sub_resource type="ShaderMaterial" id=14]
shader = ExtResource( 10 )
shader_param/bg_color = null

[sub_resource type="ShaderMaterial" id=16]
shader = ExtResource( 11 )
shader_param/PI = 3.14159
shader_param/TWOPI = 6.28319
shader_param/NUM_EXPLOSIONS = 1.0
shader_param/NUM_PARTICLES = 70.0
shader_param/MOD3 = Vector3( 0.031, 0.11369, 0.13787 )

[sub_resource type="Shader" id=21]
code = "// Much of this code was adapted from: https://www.shadertoy.com/view/MtB3zW
shader_type canvas_item;

uniform int octaves = 5;
uniform vec2 viewport_size = vec2(800.0, 600.0);
uniform float x_offset = 0.;

varying vec2 vtx;

vec3 mod289(vec3 x)
{
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec2 mod289_2(vec2 x) 
{
	return x - floor(x * (1.0 / 289.0)) * 289.0;
}

vec3 permute(vec3 x) 
{
	return mod289(((x*34.0)+1.0)*x);
}

// Simplex noise 
// https://github.com/ashima/webgl-noise 
// Copyright (C) 2011 Ashima Arts. All rights reserved.
float snoise(vec2 v)
{
	const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0
	                    0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)
	                    -0.577350269189626,  // -1.0 + 2.0 * C.x
	                    0.024390243902439); // 1.0 / 41.0
// First corner
	vec2 i  = floor(v + dot(v, C.yy) );
	vec2 x0 = v -   i + dot(i, C.xx);

// Other corners
	vec2 i1;
	//i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0
	//i1.y = 1.0 - i1.x;
	i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
	// x0 = x0 - 0.0 + 0.0 * C.xx ;
	// x1 = x0 - i1 + 1.0 * C.xx ;
	// x2 = x0 - 1.0 + 2.0 * C.xx ;
	vec4 x12 = x0.xyxy + C.xxzz;
	x12.xy -= i1;

// Permutations
	i = mod289_2(i); // Avoid truncation effects in permutation
	vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
		+ i.x + vec3(0.0, i1.x, 1.0 ));

	vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);
	m = m*m ;
	m = m*m ;

// Gradients: 41 points uniformly over a line, mapped onto a diamond.
// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)
	
	vec3 x = 2.0 * fract(p * C.www) - 1.0;
	vec3 h = abs(x) - 0.5;
	vec3 ox = floor(x + 0.5);
	vec3 a0 = x - ox;
	
	// Normalise gradients implicitly by scaling m
	// Approximation of: m *= inversesqrt( a0*a0 + h*h );
	m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
	
	// Compute final noise value at P
	vec3 g;
	g.x  = a0.x  * x0.x  + h.x  * x0.y;
	g.yz = a0.yz * x12.xz + h.yz * x12.yw;
	return 130.0 * dot(m, g);
}

vec2 rand2(vec2 p)
{
	p = vec2(dot(p, vec2(12.9898,78.233)), dot(p, vec2(26.65125, 83.054543))); 
	return fract(sin(p) * 43758.5453);
}

float rand(vec2 p)
{
	return fract(sin(dot(p.xy ,vec2(54.90898,18.233))) * 4337.5453);
}

vec3 hsv2rgb(vec3 c)
{
	vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
	vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
	return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
}

// Thanks to David Hoskins https://www.shadertoy.com/view/4djGRh
float stars(in vec2 x, float numCells, float size, float br)
{
	vec2 n = x * numCells;
	vec2 f = floor(n);

	float d = 1.0e10;
	for (int i = -1; i <= 1; ++i)
	{
		for (int j = -1; j <= 1; ++j)
		{
			vec2 g = f + vec2(float(i), float(j));
			g = n - g - rand2(mod(g, numCells)) + rand(g);
			// Control size
			g *= 1. / (numCells * size);
			d = min(d, dot(g, g));
		}
	}

	return br * (smoothstep(.95, 1., (1. - sqrt(d))));
}

// Simple fractal noise
// persistence - A multiplier that determines how quickly the amplitudes diminish for 
// each successive octave.
// lacunarity - A multiplier that determines how quickly the frequency increases for 
// each successive octave.
float fractalNoise(in vec2 coord, in float persistence, in float lacunarity)
{    
	float n = 0.;
	float frequency = 1.;
	float amplitude = 1.;
	for (int o = 0; o < octaves; ++o)
	{
	    n += amplitude * snoise(coord * frequency);
	    amplitude *= persistence;
	    frequency *= lacunarity;
	}
	return n;
}

vec3 fractalNebula(in vec2 coord, vec3 color, float transparency)
{
	float n = fractalNoise(coord, .5, 2.);
	return n * color * transparency;
}

vec4 mainImage(vec2 fragCoord)
{
	float resolution = max(viewport_size.x, viewport_size.y);
	
	vec2 coord = fragCoord.xy / resolution;
	
	vec3 result = vec3(0.);
	vec3 nebulaColor1 = hsv2rgb(vec3(.5, 0.5, .25));
	vec3 nebulaColor2 = hsv2rgb(vec3(.7, 1., .25));

	result += fractalNebula(coord + vec2(.1, .1), nebulaColor1, 1.);
	result += fractalNebula(coord + vec2(0., .2), nebulaColor2, .5);
	result += stars(coord, 4., 0.06, 0.6) * vec3(.9, .9, .95);
	
	return vec4(result, 1.);
}

void vertex()
{
	vtx = VERTEX + vec2(x_offset, 0.);
}

void fragment()
{
	COLOR = mainImage(vtx);
}"

[sub_resource type="ShaderMaterial" id=22]
shader = SubResource( 21 )
shader_param/octaves = 5
shader_param/viewport_size = Vector2( 800, 600 )
shader_param/x_offset = 0.0

[node name="main" type="Node"]
pause_mode = 1
script = ExtResource( 1 )

[node name="Backgrounds" type="Control" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0

[node name="OutrunGrid" type="ColorRect" parent="Backgrounds"]
visible = false
material = SubResource( 9 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="OutrunMidnightSunset" type="ColorRect" parent="Backgrounds"]
visible = false
material = SubResource( 10 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_left = 2.0
margin_top = -306.0
margin_right = 2.0
margin_bottom = -306.0
color = Color( 1, 1, 1, 0.478431 )

[node name="OutrunGradient" type="ColorRect" parent="Backgrounds"]
visible = false
material = SubResource( 11 )
margin_right = 1920.0
margin_bottom = 1080.0

[node name="PerspectiveGrid" type="ColorRect" parent="Backgrounds"]
visible = false
material = SubResource( 11 )
margin_left = 6.0
margin_top = -4.0
margin_right = 1926.0
margin_bottom = 1076.0

[node name="StarNestSimple" type="ColorRect" parent="Backgrounds"]
visible = false
material = SubResource( 18 )
margin_right = 1920.0
margin_bottom = 1080.0

[node name="StarNest" type="ColorRect" parent="Backgrounds"]
visible = false
material = SubResource( 8 )
margin_right = 1920.0
margin_bottom = 1080.0

[node name="Electro" type="ColorRect" parent="Backgrounds"]
visible = false
material = SubResource( 12 )
margin_right = 1920.0
margin_bottom = 1080.0
color = Color( 0.211765, 0.0392157, 0.929412, 1 )

[node name="SimpleStarsSky" type="ColorRect" parent="Backgrounds"]
material = SubResource( 14 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="Fireworks" type="ColorRect" parent="Backgrounds"]
visible = false
material = SubResource( 16 )
anchor_right = 1.0
anchor_bottom = 1.0

[node name="nebulas" type="ColorRect" parent="Backgrounds"]
visible = false
material = SubResource( 22 )
anchor_right = 1.0
anchor_bottom = 1.0
script = ExtResource( 7 )

[node name="player" parent="." instance=ExtResource( 2 )]
position = Vector2( 967, 549 )

[node name="asteroid_container" type="Node" parent="."]

[node name="explosion_container" type="Node2D" parent="."]

[node name="letter_container" type="Node" parent="."]

[node name="music" type="Node" parent="."]

[node name="backmusic1" type="AudioStreamPlayer2D" parent="music"]
position = Vector2( 4, 2 )
stream = ExtResource( 4 )
volume_db = 24.0
attenuation = 8.28211

[node name="HUD" parent="." instance=ExtResource( 6 )]

[node name="Timers" type="Node2D" parent="."]
position = Vector2( 33, 21 )

[node name="restart_timer" type="Timer" parent="Timers"]
wait_time = 3.0
one_shot = true

[node name="enemy_timer" type="Timer" parent="Timers"]
one_shot = true

[node name="drop_timer" type="Timer" parent="Timers"]

[connection signal="pickup" from="player" to="." method="_on_player_pickup"]
[connection signal="timeout" from="Timers/restart_timer" to="." method="_on_restart_timer_timeout"]
[connection signal="timeout" from="Timers/enemy_timer" to="." method="_on_enemy_timer_timeout"]
